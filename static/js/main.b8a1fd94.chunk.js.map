{"version":3,"sources":["components/counter/counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Counter","props","yearOld","state","timeLeft","actualBirthDay","timeRemained","timeDifference","nowDate","Date","birthDay","getFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","setMilliseconds","getTime","setFullYear","this","days","hours","dayInMillis","minutes","hourInMillis","seconds","minuteInMillis","setState","toString","isOneNumber","num","numstr","length","setInterval","CalculateTime","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAOaA,G,MAAb,kDAII,WAAYC,GAAW,IAAD,8BAClB,cAAMA,IAHFC,QAAgB,EAIpB,EAAKC,MAAM,CACPC,SAAS,IAHK,EAJ1B,4DAYI,IAIIC,EAMAC,EACAC,EAXEC,EAAS,IAAIC,KAEbC,GADcF,EAAQG,cACX,IAAIF,MAWrBC,EAASE,SAAS,GAClBF,EAASG,QAAQ,IACjBH,EAASI,SAAS,GAClBJ,EAASK,WAAW,GACpBL,EAASM,WAAW,GACpBN,EAASO,gBAAgB,IACzBZ,EAAkB,IAAII,KAAKC,EAASQ,YACrBC,YAjBG,MAmBfX,EAAQE,GACPA,EAASS,YAAYT,EAASC,cAAc,GAGhDS,KAAKlB,SAASQ,EAASQ,UAAUb,EAAea,WAAnC,SAAmER,EAASQ,UAAUb,EAAea,WAAnC,QAAkE,EAIjJ,IAAMG,IAFNd,EAAiBG,EAASQ,UAAUV,EAAQU,YAC5CZ,EAAaC,EAxBO,cA6Bde,IAFNf,EAAiBD,IACjBA,GA3BqBiB,YAgCfC,IAFNjB,EAAiBD,IACjBA,GA9BuBmB,UAmCjBC,IAFNnB,EAAiBD,IACjBA,GAjCuBqB,UAoCvBP,KAAKQ,SAAS,CAACxB,SAASiB,EAAKQ,WAAa,QAAUT,KAAKU,YAAYR,GAAO,IAAMF,KAAKU,YAAYN,GAAW,IAAMJ,KAAKU,YAAYJ,OAxDzI,kCA0DYK,GACR,IAAIC,EAAOD,EAAIF,WACf,OAAkB,GAAfG,EAAOC,OACC,IAAID,EAEHA,IA/DhB,+BAkEa,IAAD,OAIJ,OAHAE,aAAY,WACR,EAAKC,kBACP,KAEE,6BACI,yBAAKC,UAAU,QAAf,MACQhB,KAAKlB,QAAQ2B,WADrB,kDAGA,yBAAKO,UAAU,QACdhB,KAAKjB,MAAMC,eA5E5B,GAA6BiC,IAAMC,YCOpBC,MARf,WACE,OACE,6BACA,kBAAC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b8a1fd94.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './counter.css';\r\n\r\ninterface ICounterState {\r\n    timeLeft: string;\r\n}\r\n\r\nexport class Counter extends React.Component<{}, ICounterState>{\r\n\r\n    private yearOld: number=0;\r\n\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state={\r\n            timeLeft:\"\",\r\n        }\r\n    }\r\n\r\n    CalculateTime(){\r\n    const nowDate= new Date();\r\n    const currentYear = nowDate.getFullYear();\r\n    const birthDay = new Date();\r\n    const birthYear = 1998;\r\n    let actualBirthDay;\r\n    const dayInMillis = 1000*60*60*24;\r\n    const hourInMillis = dayInMillis/24;\r\n    const minuteInMillis = hourInMillis/60;\r\n    const secondInMillis = minuteInMillis/60;\r\n    \r\n    let timeRemained;\r\n    let timeDifference;\r\n    \r\n    birthDay.setMonth(7);\r\n    birthDay.setDate(20);\r\n    birthDay.setHours(0);\r\n    birthDay.setMinutes(0);\r\n    birthDay.setSeconds(0);\r\n    birthDay.setMilliseconds(0);\r\n    actualBirthDay  = new Date(birthDay.getTime());\r\n    actualBirthDay.setFullYear(birthYear);\r\n    \r\n    if(nowDate>birthDay){\r\n        birthDay.setFullYear(birthDay.getFullYear()+1);\r\n    }\r\n    \r\n    this.yearOld=(birthDay.getTime()-actualBirthDay.getTime())/(1000*60*60*24*365)-(birthDay.getTime()-actualBirthDay.getTime())/(1000*60*60*24*365)%1;\r\n    \r\n    timeDifference = birthDay.getTime()-nowDate.getTime();\r\n    timeRemained=timeDifference%dayInMillis;\r\n    const days = (timeDifference-timeRemained)/dayInMillis;\r\n    \r\n    timeDifference = timeRemained;\r\n    timeRemained = timeRemained%hourInMillis;\r\n    const hours = (timeDifference-timeRemained)/hourInMillis;\r\n    \r\n    timeDifference = timeRemained;\r\n    timeRemained = timeRemained%minuteInMillis;\r\n    const minutes = (timeDifference-timeRemained)/minuteInMillis;\r\n    \r\n    timeDifference = timeRemained;\r\n    timeRemained = timeRemained%secondInMillis;\r\n    const seconds = (timeDifference-timeRemained)/secondInMillis;\r\n    \r\n    this.setState({timeLeft:days.toString() + \" nap \" + this.isOneNumber(hours)+\":\" + this.isOneNumber(minutes) + \":\" + this.isOneNumber(seconds)});\r\n}\r\nisOneNumber(num:number) : string{\r\n    let numstr=num.toString()\r\n    if(numstr.length==1){\r\n        return \"0\"+numstr;\r\n    }\r\n    else return numstr;\r\n}\r\n\r\n    render(){\r\n        setInterval(()=>{\r\n            this.CalculateTime();\r\n        },1000)\r\n        return(\r\n            <div>\r\n                <div className=\"text\">\r\n                    A  {this.yearOld.toString()}. szülinapig hátralévő idő:\r\n                </div>\r\n                <div className=\"time\">\r\n                {this.state.timeLeft}\r\n                </div>\r\n            </div>       \r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Counter } from './components/counter/counter';\nimport { Gallery } from './components/gallery/gallery';\n\nfunction App() {\n  return (\n    <div>\n    <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}